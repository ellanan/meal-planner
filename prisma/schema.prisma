datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// run 'prisma generate' to re-generate Prisma Client to ensure the code
// inside node_modules/.prisma/client gets updated after updating data model

model User {
  id         String   @id @default(cuid())
  username   String
  email      String   @unique
  password   String
  recipes    Recipe[]
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id])
  mealPlanId String
}

model IngredientType {
  id          String       @id @default(cuid())
  name        String       @unique
  ingredients Ingredient[]
}

model Ingredient {
  id               String          @id @default(cuid())
  name             String
  ingredientType   IngredientType? @relation(fields: [ingredientTypeId], references: [id])
  ingredientTypeId String?
  recipe           Recipe[]
}

model Recipe {
  id             String          @id @default(cuid())
  name           String
  imageUrl       String?
  category       RecipeCategory? @relation(fields: [categoryId], references: [id])
  categoryId     String?
  ingredients    Ingredient[]
  user           User?           @relation(fields: [userId], references: [id])
  userId         String?
  content        String?
  ScheduledEntry MealPlanEntry[]
}

model RecipeCategory {
  id     String   @id @default(cuid())
  name   String   @unique
  recipe Recipe[]
}

model GroceryList {
  id   String @id @default(cuid())
  name String
}

model MealPlan {
  id       String          @id @default(cuid())
  schedule MealPlanEntry[]
  users    User[]
}

model MealPlanEntry {
  id         String   @id @default(cuid())
  date       DateTime @db.Date
  mealType   MealType
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id])
  mealPlanId String
  recipe     Recipe   @relation(fields: [recipeId], references: [id])
  recipeId   String
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
}
